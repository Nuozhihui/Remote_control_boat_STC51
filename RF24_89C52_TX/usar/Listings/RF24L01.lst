C51 COMPILER V9.60.0.0   RF24L01                                                           03/15/2022 22:42:11 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE RF24L01
OBJECT MODULE PLACED IN .\RF24L01.obj
COMPILER INVOKED BY: D:\Code\ARM\C51\BIN\C51.EXE ..\Common\RF24L01.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Inclu
                    -de) DEBUG PRINT(.\Listings\RF24L01.lst) TABS(2) OBJECT(.\RF24L01.obj)

line level    source

   1          /*
   2          
   3              GT-24 V1.0 (RF24L01) 测试开发程序
   4          
   5              编者：果云科技有限公司
   6            淘宝店铺:https://shop532831232.taobao.com
   7            
   8            适用芯片：89C52
   9            
  10            线路连接：  RF24L01： VCC        3.3V
  11                         GND        GND
  12                        CE        P1^0
  13                       IRQ        P1^5
  14                                   CSN        P1^3
  15                         SCK        P1^1
  16                      MOSI        P1^4
  17                      MISO        P1^2
  18                      
  19                  OLED(IIC):  VCC        3.3V
  20                          GND        GND
  21                      SCL        P1^6
  22                      SDA        P1^7
  23                      
  24              最后修改时间；2018年8月1日 12:00:00
  25          
  26          */
  27          #include "RF24L01.h"
  28          #include "delay.h"
  29          
  30          const char *g_ErrorString = "RF24L01 is not find !...";
  31          
  32          
  33          /**
  34            * @brief :NRF24L01读寄存器
  35            * @param :
  36                     @Addr:寄存器地址
  37            * @note  :地址在设备中有效
  38            * @retval:读取的数据
  39            */
  40          uint8_t NRF24L01_Read_Reg( uint8_t RegAddr )
  41          {
  42   1          uint8_t btmp;
  43   1        
  44   1          RF24L01_SET_CS_LOW( );      //片选
  45   1        
  46   1          drv_spi_read_write_byte( NRF_READ_REG | RegAddr );  //读命令 地址
  47   1          btmp = drv_spi_read_write_byte( 0xFF );       //读数据
  48   1        
  49   1          RF24L01_SET_CS_HIGH( );     //取消片选
  50   1        
  51   1          return btmp;
  52   1      }
  53          
  54          /**
C51 COMPILER V9.60.0.0   RF24L01                                                           03/15/2022 22:42:11 PAGE 2   

  55            * @brief :NRF24L01读指定长度的数据
  56            * @param :
  57            *     @reg:地址
  58            *     @pBuf:数据存放地址
  59            *     @len:数据长度
  60            * @note  :数据长度不超过255，地址在设备中有效
  61            * @retval:读取状态
  62            */
  63          void NRF24L01_Read_Buf( uint8_t RegAddr, uint8_t *pBuf, uint8_t len )
  64          {
  65   1          uint8_t btmp;
  66   1        
  67   1          RF24L01_SET_CS_LOW( );      //片选
  68   1        
  69   1          drv_spi_read_write_byte( NRF_READ_REG | RegAddr );  //读命令 地址
  70   1          for( btmp = 0; btmp < len; btmp ++ )
  71   1          {
  72   2              *( pBuf + btmp ) = drv_spi_read_write_byte( 0xFF ); //读数据
  73   2          }
  74   1          RF24L01_SET_CS_HIGH( );   //取消片选
  75   1      }
  76          
  77          /**
  78            * @brief :NRF24L01写寄存器
  79            * @param :无
  80            * @note  :地址在设备中有效
  81            * @retval:读写状态
  82            */
  83          void NRF24L01_Write_Reg( uint8_t RegAddr, uint8_t Value )
  84          {
  85   1          RF24L01_SET_CS_LOW( );    //片选
  86   1        
  87   1          drv_spi_read_write_byte( NRF_WRITE_REG | RegAddr ); //写命令 地址
  88   1          drv_spi_read_write_byte( Value );     //写数据
  89   1        
  90   1          RF24L01_SET_CS_HIGH( );   //取消片选
  91   1      }
  92          
  93          /**
  94            * @brief :NRF24L01写指定长度的数据
  95            * @param :
  96            *     @reg:地址
  97            *     @pBuf:写入的数据地址
  98            *     @len:数据长度
  99            * @note  :数据长度不超过255，地址在设备中有效
 100            * @retval:写状态
 101            */
 102          void NRF24L01_Write_Buf( uint8_t RegAddr, uint8_t *pBuf, uint8_t len )
 103          {
 104   1          uint8_t i;
 105   1        
 106   1          RF24L01_SET_CS_LOW( );    //片选
 107   1        
 108   1          drv_spi_read_write_byte( NRF_WRITE_REG | RegAddr ); //写命令 地址
 109   1          for( i = 0; i < len; i ++ )
 110   1          {
 111   2              drv_spi_read_write_byte( *( pBuf + i ) );   //写数据
 112   2          }
 113   1        
 114   1          RF24L01_SET_CS_HIGH( );   //取消片选
 115   1      }
 116          
C51 COMPILER V9.60.0.0   RF24L01                                                           03/15/2022 22:42:11 PAGE 3   

 117          /**
 118            * @brief :清空TX缓冲区
 119            * @param :无
 120            * @note  :无
 121            * @retval:无
 122            */
 123          void NRF24L01_Flush_Tx_Fifo ( void )
 124          {
 125   1          RF24L01_SET_CS_LOW( );    //片选
 126   1        
 127   1          drv_spi_read_write_byte( FLUSH_TX );  //清TX FIFO命令
 128   1        
 129   1          RF24L01_SET_CS_HIGH( );   //取消片选
 130   1      }
 131          
 132          /**
 133            * @brief :清空RX缓冲区
 134            * @param :无
 135            * @note  :无
 136            * @retval:无
 137            */
 138          void NRF24L01_Flush_Rx_Fifo( void )
 139          {
 140   1          RF24L01_SET_CS_LOW( );    //片选
 141   1        
 142   1          drv_spi_read_write_byte( FLUSH_RX );  //清RX FIFO命令
 143   1        
 144   1          RF24L01_SET_CS_HIGH( );   //取消片选
 145   1      }
 146          
 147          /**
 148            * @brief :重新使用上一包数据
 149            * @param :无
 150            * @note  :无
 151            * @retval:无
 152            */
 153          void NRF24L01_Reuse_Tx_Payload( void )
 154          {
 155   1          RF24L01_SET_CS_LOW( );    //片选
 156   1        
 157   1          drv_spi_read_write_byte( REUSE_TX_PL );   //重新使用上一包命令
 158   1        
 159   1          RF24L01_SET_CS_HIGH( );   //取消片选
 160   1      }
 161          
 162          /**
 163            * @brief :NRF24L01空操作
 164            * @param :无
 165            * @note  :无
 166            * @retval:无
 167            */
 168          void NRF24L01_Nop( void )
 169          {
 170   1          RF24L01_SET_CS_LOW( );    //片选
 171   1        
 172   1          drv_spi_read_write_byte( NOP );   //空操作命令
 173   1        
 174   1          RF24L01_SET_CS_HIGH( );   //取消片选
 175   1      }
 176          
 177          /**
 178            * @brief :NRF24L01读状态寄存器
C51 COMPILER V9.60.0.0   RF24L01                                                           03/15/2022 22:42:11 PAGE 4   

 179            * @param :无
 180            * @note  :无
 181            * @retval:RF24L01状态
 182            */
 183          uint8_t NRF24L01_Read_Status_Register( void )
 184          {
 185   1          uint8_t Status;
 186   1        
 187   1          RF24L01_SET_CS_LOW( );    //片选
 188   1        
 189   1          Status = drv_spi_read_write_byte( NRF_READ_REG + STATUS );  //读状态寄存器
 190   1        
 191   1          RF24L01_SET_CS_HIGH( );   //取消片选
 192   1        
 193   1          return Status;
 194   1      }
 195          
 196          /**
 197            * @brief :NRF24L01清中断
 198            * @param :
 199                     @IRQ_Source:中断源
 200            * @note  :无
 201            * @retval:清除后状态寄存器的值
 202            */
 203          uint8_t NRF24L01_Clear_IRQ_Flag( uint8_t IRQ_Source )
 204          {
 205   1          uint8_t btmp = 0;
 206   1      
 207   1          IRQ_Source &= ( 1 << RX_DR ) | ( 1 << TX_DS ) | ( 1 << MAX_RT );  //中断标志处理
 208   1          btmp = NRF24L01_Read_Status_Register( );      //读状态寄存器
 209   1            
 210   1          RF24L01_SET_CS_LOW( );      //片选
 211   1          drv_spi_read_write_byte( NRF_WRITE_REG + STATUS );  //写状态寄存器命令
 212   1          drv_spi_read_write_byte( IRQ_Source | btmp );   //清相应中断标志
 213   1          RF24L01_SET_CS_HIGH( );     //取消片选
 214   1        
 215   1          return ( NRF24L01_Read_Status_Register( ));     //返回状态寄存器状态
 216   1      }
 217          
 218          /**
 219            * @brief :读RF24L01中断状态
 220            * @param :无
 221            * @note  :无
 222            * @retval:中断状态
 223            */
 224          uint8_t RF24L01_Read_IRQ_Status( void )
 225          {
 226   1          return ( NRF24L01_Read_Status_Register( ) & (( 1 << RX_DR ) | ( 1 << TX_DS ) | ( 1 << MAX_RT ))); //返
             -回中断状态
 227   1      }
 228           
 229           /**
 230            * @brief :读FIFO中数据宽度
 231            * @param :无
 232            * @note  :无
 233            * @retval:数据宽度
 234            */
 235          uint8_t NRF24L01_Read_Top_Fifo_Width( void )
 236          {
 237   1          uint8_t btmp;
 238   1        
 239   1          RF24L01_SET_CS_LOW( );    //片选
C51 COMPILER V9.60.0.0   RF24L01                                                           03/15/2022 22:42:11 PAGE 5   

 240   1        
 241   1          drv_spi_read_write_byte( R_RX_PL_WID ); //读FIFO中数据宽度命令
 242   1          btmp = drv_spi_read_write_byte( 0xFF ); //读数据
 243   1        
 244   1          RF24L01_SET_CS_HIGH( );   //取消片选
 245   1        
 246   1          return btmp;
 247   1      }
 248          
 249           /**
 250            * @brief :读接收到的数据
 251            * @param :无
 252            * @note  :无
 253            * @retval:
 254                     @pRxBuf:数据存放地址首地址
 255            */
 256          uint8_t NRF24L01_Read_Rx_Payload( uint8_t *pRxBuf )
 257          {
 258   1          uint8_t Width, PipeNum;
 259   1        
 260   1          PipeNum = ( NRF24L01_Read_Reg( STATUS ) >> 1 ) & 0x07;  //读接收状态
 261   1          Width = NRF24L01_Read_Top_Fifo_Width( );    //读接收数据个数
 262   1      
 263   1          RF24L01_SET_CS_LOW( );    //片选
 264   1          drv_spi_read_write_byte( RD_RX_PLOAD );     //读有效数据命令
 265   1        
 266   1          for( PipeNum = 0; PipeNum < Width; PipeNum ++ )
 267   1          {
 268   2              *( pRxBuf + PipeNum ) = drv_spi_read_write_byte( 0xFF );    //读数据
 269   2          }
 270   1          RF24L01_SET_CS_HIGH( );   //取消片选
 271   1          NRF24L01_Flush_Rx_Fifo( );  //清空RX FIFO
 272   1        
 273   1          return Width;
 274   1      }
 275          
 276           /**
 277            * @brief :发送数据（带应答）
 278            * @param :
 279            *     @pTxBuf:发送数据地址
 280            *     @len:长度
 281            * @note  :一次不超过32个字节
 282            * @retval:无
 283            */
 284          void NRF24L01_Write_Tx_Payload_Ack( uint8_t *pTxBuf, uint8_t len )
 285          {
 286   1          uint8_t btmp;
 287   1          uint8_t length = ( len > 32 ) ? 32 : len;   //数据长达大约32 则只发送32个
 288   1      
 289   1          NRF24L01_Flush_Tx_Fifo( );    //清TX FIFO
 290   1        
 291   1          RF24L01_SET_CS_LOW( );      //片选
 292   1          drv_spi_read_write_byte( WR_TX_PLOAD ); //发送命令
 293   1        
 294   1          for( btmp = 0; btmp < length; btmp ++ )
 295   1          {
 296   2              drv_spi_read_write_byte( *( pTxBuf + btmp ) );  //发送数据
 297   2          }
 298   1          RF24L01_SET_CS_HIGH( );     //取消片选
 299   1      }
 300          
 301           /**
C51 COMPILER V9.60.0.0   RF24L01                                                           03/15/2022 22:42:11 PAGE 6   

 302            * @brief :发送数据（不带应答）
 303            * @param :
 304            *     @pTxBuf:发送数据地址
 305            *     @len:长度
 306            * @note  :一次不超过32个字节
 307            * @retval:无
 308            */
 309          void NRF24L01_Write_Tx_Payload_NoAck( uint8_t *pTxBuf, uint8_t len )
 310          {
 311   1          if( len > 32 || len == 0 )
 312   1          {
 313   2              return ;    //数据长度大于32 或者等于0 不执行
 314   2          }
 315   1        
 316   1          RF24L01_SET_CS_LOW( );  //片选
 317   1          drv_spi_read_write_byte( WR_TX_PLOAD_NACK );  //发送命令
 318   1          while( len-- )
 319   1          {
 320   2              drv_spi_read_write_byte( *pTxBuf );     //发送数据
 321   2          pTxBuf++;
 322   2          }
 323   1          RF24L01_SET_CS_HIGH( );   //取消片选
 324   1      }
 325          
 326           /**
 327            * @brief :在接收模式下向TX FIFO写数据(带ACK)
 328            * @param :
 329            *     @pData:数据地址
 330            *     @len:长度
 331            * @note  :一次不超过32个字节
 332            * @retval:无
 333            */
 334          void NRF24L01_Write_Tx_Payload_InAck( uint8_t *pData, uint8_t len )
 335          {
 336   1          uint8_t btmp;
 337   1        
 338   1        len = ( len > 32 ) ? 32 : len;    //数据长度大于32个则只写32个字节
 339   1      
 340   1          RF24L01_SET_CS_LOW( );      //片选
 341   1          drv_spi_read_write_byte( W_ACK_PLOAD );   //命令
 342   1          for( btmp = 0; btmp < len; btmp ++ )
 343   1          {
 344   2              drv_spi_read_write_byte( *( pData + btmp ) ); //写数据
 345   2          }
 346   1          RF24L01_SET_CS_HIGH( );     //取消片选
 347   1      }
 348          
 349           /**
 350            * @brief :设置发送地址
 351            * @param :
 352            *     @pAddr:地址存放地址
 353            *     @len:长度
 354            * @note  :无
 355            * @retval:无
 356            */
 357          void NRF24L01_Set_TxAddr( uint8_t *pAddr, uint8_t len )
 358          {
 359   1        len = ( len > 5 ) ? 5 : len;          //地址不能大于5个字节
 360   1          NRF24L01_Write_Buf( TX_ADDR, pAddr, len );  //写地址
 361   1      }
 362          
 363           /**
C51 COMPILER V9.60.0.0   RF24L01                                                           03/15/2022 22:42:11 PAGE 7   

 364            * @brief :设置接收通道地址
 365            * @param :
 366            *     @PipeNum:通道
 367            *     @pAddr:地址存肥着地址
 368            *     @Len:长度
 369            * @note  :通道不大于5 地址长度不大于5个字节
 370            * @retval:无
 371            */
 372          void NRF24L01_Set_RxAddr( uint8_t PipeNum, uint8_t *pAddr, uint8_t Len )
 373          {
 374   1          Len = ( Len > 5 ) ? 5 : Len;
 375   1          PipeNum = ( PipeNum > 5 ) ? 5 : PipeNum;    //通道不大于5 地址长度不大于5个字节
 376   1      
 377   1          NRF24L01_Write_Buf( RX_ADDR_P0 + PipeNum, pAddr, Len ); //写入地址
 378   1      }
 379          
 380           /**
 381            * @brief :设置通信速度
 382            * @param :
 383            *     @Speed:速度
 384            * @note  :无
 385            * @retval:无
 386            */
 387          void NRF24L01_Set_Speed( nRf24l01SpeedType Speed )
 388          {
 389   1        uint8_t btmp = 0;
 390   1        
 391   1        btmp = NRF24L01_Read_Reg( RF_SETUP );
 392   1        btmp &= ~( ( 1<<5 ) | ( 1<<3 ) );
 393   1        
 394   1        if( Speed == SPEED_250K )   //250K
 395   1        {
 396   2          btmp |= ( 1<<5 );
 397   2        }
 398   1        else if( Speed == SPEED_1M )   //1M
 399   1        {
 400   2            btmp &= ~( ( 1<<5 ) | ( 1<<3 ) );
 401   2        }
 402   1        else if( Speed == SPEED_2M )   //2M
 403   1        {
 404   2          btmp |= ( 1<<3 );
 405   2        }
 406   1      
 407   1        NRF24L01_Write_Reg( RF_SETUP, btmp );
 408   1      }
 409          
 410           /**
 411            * @brief :设置功率
 412            * @param :
 413            *     @Speed:速度
 414            * @note  :无
 415            * @retval:无
 416            */
 417          void NRF24L01_Set_Power( nRf24l01PowerType Power )
 418          {
 419   1          uint8_t btmp;
 420   1        
 421   1        btmp = NRF24L01_Read_Reg( RF_SETUP ) & ~0x07;
 422   1          switch( Power )
 423   1          {
 424   2              case POWER_F18DBM:
 425   2                  btmp |= PWR_18DB;
C51 COMPILER V9.60.0.0   RF24L01                                                           03/15/2022 22:42:11 PAGE 8   

 426   2                  break;
 427   2              case POWER_F12DBM:
 428   2                  btmp |= PWR_12DB;
 429   2                  break;
 430   2              case POWER_F6DBM:
 431   2                  btmp |= PWR_6DB;
 432   2                  break;
 433   2              case POWER_0DBM:
 434   2                  btmp |= PWR_0DB;
 435   2                  break;
 436   2              default:
 437   2                  break;
 438   2          }
 439   1          NRF24L01_Write_Reg( RF_SETUP, btmp );
 440   1      }
 441          
 442           /**
 443            * @brief :设置频率
 444            * @param :
 445            *     @FreqPoint:频率设置参数
 446            * @note  :值不大于127
 447            * @retval:无
 448            */
 449          void RF24LL01_Write_Hopping_Point( uint8_t FreqPoint )
 450          {
 451   1          NRF24L01_Write_Reg(  RF_CH, FreqPoint & 0x7F );
 452   1      }
 453          
 454          /**
 455            * @brief :NRF24L01检测
 456            * @param :无
 457            * @note  :无
 458            * @retval:无
 459            */ 
 460          void  NRF24L01_check( void )
 461          {
 462   1        uint8_t i;
 463   1        uint8_t buf[5]={ 0XA5, 0XA5, 0XA5, 0XA5, 0XA5 };
 464   1        uint8_t read_buf[ 5 ] = { 0 };
 465   1         
 466   1        while( 1 )
 467   1        {
 468   2          NRF24L01_Write_Buf( TX_ADDR, buf, 5 );      //写入5个字节的地址
 469   2          NRF24L01_Read_Buf( TX_ADDR, read_buf,5 );   //读出写入的地址  
 470   2          for( i = 0; i < 5; i++ )
 471   2          {
 472   3            if( buf[ i ] != read_buf[ i ] )
 473   3            {
 474   4              break;      //读出的值和写入的置不同
 475   4            } 
 476   3          } 
 477   2          
 478   2          if( 5 == i )
 479   2          {
 480   3            break;        //读出的字符串与写入的字符串相同，判断为设备存在
 481   3          }
 482   2          else
 483   2          {
 484   3            drv_uart_tx_bytes( (uint8_t *)g_ErrorString, 26 );  //检测不到设备，输出警告信息
 485   3          }
 486   2          delay_ms( 500 );  //500MS检测一次
 487   2        }
C51 COMPILER V9.60.0.0   RF24L01                                                           03/15/2022 22:42:11 PAGE 9   

 488   1      }
 489          
 490           /**
 491            * @brief :设置模式
 492            * @param :
 493            *     @Mode:模式发送模式或接收模式
 494            * @note  :无
 495            * @retval:无
 496            */
 497          void RF24L01_Set_Mode( nRf24l01ModeType Mode )
 498          {
 499   1          uint8_t controlreg = 0;
 500   1        controlreg = NRF24L01_Read_Reg( CONFIG );
 501   1        
 502   1          if( Mode == MODE_TX )       
 503   1        {
 504   2          controlreg &= ~( 1<< PRIM_RX );
 505   2        }
 506   1          else 
 507   1        {
 508   2          if( Mode == MODE_RX )  
 509   2          { 
 510   3            controlreg |= ( 1<< PRIM_RX ); 
 511   3          }
 512   2        }
 513   1      
 514   1          NRF24L01_Write_Reg( CONFIG, controlreg );
 515   1      }
 516          
 517          /**
 518            * @brief :NRF24L01发送一次数据
 519            * @param :
 520            *     @txbuf:待发送数据首地址
 521            *     @Length:发送数据长度
 522            * @note  :无
 523            * @retval:
 524            *     MAX_TX：达到最大重发次数
 525            *     TX_OK：发送完成
 526            *     0xFF:其他原因
 527            */ 
 528          uint8_t NRF24L01_TxPacket( uint8_t *txbuf, uint8_t Length )
 529          {
 530   1        uint8_t l_Status = 0;
 531   1        uint16_t l_MsTimes = 0;
 532   1        
 533   1        RF24L01_SET_CS_LOW( );    //片选
 534   1        drv_spi_read_write_byte( FLUSH_TX );
 535   1        RF24L01_SET_CS_HIGH( );
 536   1        
 537   1        RF24L01_SET_CE_LOW( );    
 538   1        NRF24L01_Write_Buf( WR_TX_PLOAD, txbuf, Length ); //写数据到TX BUF 32字节  TX_PLOAD_WIDTH
 539   1        RF24L01_SET_CE_HIGH( );     //启动发送
 540   1        while( 0 != RF24L01_GET_IRQ_STATUS( ))
 541   1        {
 542   2          delay_ms( 1 );
 543   2          if( 500 == l_MsTimes++ )            //500ms还没有发送成功，重新初始化设备
 544   2          {
 545   3            NRF24L01_Gpio_Init( );
 546   3            RF24L01_Init( );
 547   3            RF24L01_Set_Mode( MODE_TX );
 548   3            break;
 549   3          }
C51 COMPILER V9.60.0.0   RF24L01                                                           03/15/2022 22:42:11 PAGE 10  

 550   2        }
 551   1        l_Status = NRF24L01_Read_Reg(STATUS);           //读状态寄存器
 552   1        NRF24L01_Write_Reg( STATUS, l_Status );           //清除TX_DS或MAX_RT中断标志
 553   1        
 554   1        if( l_Status & MAX_TX ) //达到最大重发次数
 555   1        {
 556   2          NRF24L01_Write_Reg( FLUSH_TX,0xff );  //清除TX FIFO寄存器
 557   2          return MAX_TX; 
 558   2        }
 559   1        if( l_Status & TX_OK )  //发送完成
 560   1        {
 561   2          return TX_OK;
 562   2        }
 563   1        
 564   1        return 0xFF;  //其他原因发送失败
 565   1      }
 566          
 567          /**
 568            * @brief :NRF24L01接收数据
 569            * @param :
 570            *     @rxbuf:接收数据存放地址
 571            * @note  :无
 572            * @retval:
 573            *     0:接收完成
 574            *     1:没有接收到数据
 575            */ 
 576          uint8_t NRF24L01_RxPacket( uint8_t *rxbuf )
 577          {
 578   1        uint8_t l_Status = 0, l_RxLength = 0, l_100MsTimes = 0;
 579   1        
 580   1        RF24L01_SET_CS_LOW( );    //片选
 581   1        drv_spi_read_write_byte( FLUSH_RX );
 582   1        RF24L01_SET_CS_HIGH( );
 583   1        
 584   1        while( 0 != RF24L01_GET_IRQ_STATUS( ))
 585   1        {
 586   2          delay_ms( 100 );
 587   2          
 588   2          if( 30 == l_100MsTimes++ )    //3s没接收过数据，重新初始化模块
 589   2          {
 590   3            NRF24L01_Gpio_Init( );
 591   3            RF24L01_Init( );
 592   3            RF24L01_Set_Mode( MODE_RX );
 593   3            break;
 594   3          }
 595   2        }
 596   1        
 597   1        l_Status = NRF24L01_Read_Reg( STATUS );   //读状态寄存器
 598   1        NRF24L01_Write_Reg( STATUS,l_Status );    //清中断标志
 599   1        if( l_Status & RX_OK) //接收到数据
 600   1        {
 601   2          l_RxLength = NRF24L01_Read_Reg( R_RX_PL_WID );    //读取接收到的数据个数
 602   2          NRF24L01_Read_Buf( RD_RX_PLOAD,rxbuf,l_RxLength );  //接收到数据 
 603   2          NRF24L01_Write_Reg( FLUSH_RX,0xff );        //清除RX FIFO
 604   2          return l_RxLength; 
 605   2        } 
 606   1        
 607   1        return 0;       //没有收到数据  
 608   1      }
 609          
 610          /**
 611            * @brief :NRF24L01初始化
C51 COMPILER V9.60.0.0   RF24L01                                                           03/15/2022 22:42:11 PAGE 11  

 612            * @param :无
 613            * @note  :无
 614            * @retval:无
 615            */ 
 616          void NRF24L01_Gpio_Init( void )
 617          { 
 618   1        //引脚配置 部分51单片机不需要 
 619   1        //CE 配置为输出 IRQ配置为输入
 620   1        RF24L01_CE_PxM0 |= IO_OUT_PUT_PP_M0 << RF24L01_CE_PIN_BIT;
 621   1        RF24L01_CE_PxM1 |= IO_OUT_PUT_PP_M1 << RF24L01_CE_PIN_BIT;
 622   1        RF24L01_CE = 1;
 623   1        
 624   1        RF24L01_IRQ_PxM0 |= IO_IN_PUT_ONLY_M0 << RF24L01_IRQ_PIN_BIT;
 625   1        RF24L01_IRQ_PxM1 |= IO_IN_PUT_ONLY_M1 << RF24L01_IRQ_PIN_BIT;
 626   1        
 627   1        RF24L01_CE = 0;       //使能设备
 628   1        RF24L01_IRQ = 1;      //清中断
 629   1        RF24L01_SET_CS_HIGH( );   //取消SPI片选
 630   1      }
 631          
 632           /**
 633            * @brief :RF24L01模块初始化
 634            * @param :无
 635            * @note  :无
 636            * @retval:无
 637            */
 638          void RF24L01_Init( void )
 639          {
 640   1          uint8_t addr[5] = {INIT_ADDR};
 641   1      
 642   1          RF24L01_SET_CE_HIGH( );
 643   1          NRF24L01_Clear_IRQ_Flag( IRQ_ALL );
 644   1      #if DYNAMIC_PACKET == 1
 645   1      
 646   1          NRF24L01_Write_Reg( DYNPD, ( 1 << 0 ) );  //使能通道1动态数据长度
 647   1          NRF24L01_Write_Reg( FEATRUE, 0x07 );
 648   1          NRF24L01_Read_Reg( DYNPD );
 649   1          NRF24L01_Read_Reg( FEATRUE );
 650   1        
 651   1      #elif DYNAMIC_PACKET == 0
                  
                  L01_WriteSingleReg( L01REG_RX_PW_P0, FIXED_PACKET_LEN );  //固定数据长度
                
              #endif  //DYNAMIC_PACKET
 656   1      
 657   1          NRF24L01_Write_Reg( CONFIG, /*( 1<<MASK_RX_DR ) |*/   //接收中断
 658   1                                            ( 1 << EN_CRC ) |     //使能CRC 1个字节
 659   1                                            ( 1 << PWR_UP ) );    //开启设备
 660   1          NRF24L01_Write_Reg( EN_AA, ( 1 << ENAA_P0 ) );      //通道0自动应答
 661   1          NRF24L01_Write_Reg( EN_RXADDR, ( 1 << ERX_P0 ) );   //通道0接收
 662   1          NRF24L01_Write_Reg( SETUP_AW, AW_5BYTES );          //地址宽度 5个字节
 663   1          NRF24L01_Write_Reg( SETUP_RETR, ARD_4000US |
 664   1                              ( REPEAT_CNT & 0x0F ) );          //重复等待时间 250us
 665   1          NRF24L01_Write_Reg( RF_CH, 60 );                  //初始化通道
 666   1          NRF24L01_Write_Reg( RF_SETUP, 0x26 );
 667   1      
 668   1          NRF24L01_Set_TxAddr( &addr[0], 5 );                      //设置TX地址
 669   1          NRF24L01_Set_RxAddr( 0, &addr[0], 5 );                   //设置RX地址
 670   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.60.0.0   RF24L01                                                           03/15/2022 22:42:11 PAGE 12  

   CODE SIZE        =   1506    ----
   CONSTANT SIZE    =     40    ----
   XDATA SIZE       =      3      70
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
